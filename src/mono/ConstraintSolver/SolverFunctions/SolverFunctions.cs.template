/****************************************************************************
**
** This file is part of the pSketcher project.
**
** This file may be used under the terms of the GNU General Public
** License version 2.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of
** this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** Copyright (C) 2006-2009 Michael Greminger. All rights reserved.
**
****************************************************************************/

using System;
using System.Collections.Generic;
using dnAnalytics.LinearAlgebra;

<%!
from cscode import cscode
%>

namespace pSketcher.ConstraintSolver.SolverFunctions
{
    static class Factory {
        public static SolverFunctionBase Create(string solver_function_name, Stack<DOF> dof_list)
        {
            SolverFunctionBase new_solver_function;

        %for index,equation in enumerate(equations):
            %if index == 0:
            if(solver_function_name == "${equation.function_name}")
                new_solver_function = new ${equation.function_name}(dof_list);
            %else:
            else if (solver_function_name == "${equation.function_name}")
                new_solver_function = new ${equation.function_name}(dof_list);
            %endif
        %endfor
            else
                throw new ArgumentException("Factory.Create: The requested solver function name was not found.", "solver_function_name");

            return new_solver_function;
        }
    }

    %for equation in equations:

    class ${equation.function_name} : SolverFunctionBase {

        public ${equation.function_name}(${make_parameter_list(equation.parameter_list)})
        {
            %for parameter in equation.parameter_list:
            AddDOF(${parameter});
            %endfor
        }

        public ${equation.function_name}(Stack<DOF> dof_list)
        {
            // Check to make sure the correct number of parameters have been provided
            if(dof_list.Count != ${len(equation.parameter_list)})
                throw new ArgumentException("The DOF list for the constructor of SolverFunction ${equation.function_name} did not contain exactly ${len(equation.parameter_list)} items.", "dof_list");

            foreach (DOF item in dof_list)
                AddDOF(item);
        }

        public override string Name {
            get { return "${equation.function_name}" ;}
        }

        public override double GetValue()
        {
            %for index,parameter in enumerate(equation.parameter_list):
            double ${parameter} = GetDOF(${index}).Value;
            %endfor

            return ${cscode(equation.expression)};
        }

        public override double GetValueSelf(Vector input)
        {
            %for index,parameter in enumerate(equation.parameter_list):
            double ${parameter} = input[${index}];
            %endfor

            return ${cscode(equation.expression)};
        }

        public override Vector GetGradientSelf(Vector input)
        {
            #pragma warning disable 169,219

            Vector result = new DenseVector(GetNumDOFs(),1);

            %for index,parameter in enumerate(equation.parameter_list):
            double ${parameter} = input[${index}];
            %endfor

            %for index,parameter in enumerate(equation.parameter_list):
            result[${index}] = ${cscode(equation.expression.diff(parameter))};
            %endfor

            return result;

            #pragma warning restore 169,219
        }

    } // class ${equation.function_name}
    %endfor

}

<%def name="make_parameter_list(parameter_list)">\
% for index,parameter in enumerate(parameter_list):
DOF ${parameter}\
        % if index < len(parameter_list)-1:
, \
        % endif
    % endfor
</%def>
