#include <cmath>

#include "SolverFunctions.h"
<%!
from sympy import ccode
%>

%for equation in equations:

${equation.function_name}::${equation.function_name}(${make_parameter_list(equation.parameter_list)})
{
    %for parameter in equation.parameter_list:
    AddDOF(${parameter});
    %endfor
}

double ${equation.function_name}::GetValue() const
{
    %for index,parameter in enumerate(equation.parameter_list):
    double ${parameter} = GetDOF(${index})->GetValue();
    %endfor

    return ${ccode(equation.expression)};
}

double ${equation.function_name}::GetValueSelf(const mmcMatrix &params) const
{
    %for index,parameter in enumerate(equation.parameter_list):
    double ${parameter} = params(${index},0);
    %endfor

    return ${ccode(equation.expression)};
}

mmcMatrix ${equation.function_name}::GetGradientSelf(const mmcMatrix &params) const
{
    mmcMatrix result(GetNumDOFs(),1);

    %for index,parameter in enumerate(equation.parameter_list):
    double ${parameter} = params(${index},0);
    %endfor

    %for index,parameter in enumerate(equation.parameter_list):
    result(${index},0) = ${ccode(equation.expression.diff(parameter))};
    %endfor

    return result;
}
%endfor

<%def name="make_parameter_list(parameter_list)">\
% for index,parameter in enumerate(parameter_list):
DOFPointer ${parameter}\
        % if index < len(parameter_list)-1:
, \
        % endif
    % endfor
</%def>